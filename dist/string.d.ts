import { Validator } from "./base";
declare type StringSchema = {
    validator: Validator<string>;
    min: (n: number) => StringSchema;
    max: (n: number) => StringSchema;
    len: (n: number) => StringSchema;
    includes: (searchString: string, position: number) => StringSchema;
    startWith: (searchString: string, length: number | undefined) => StringSchema;
    endsWith: (searchString: string, length: number | undefined) => StringSchema;
    test: (re: RegExp) => StringSchema;
    email: () => StringSchema;
    uuid_v4: () => StringSchema;
    concat: (...strs: string[]) => StringSchema;
    prepend: (...strs: string[]) => StringSchema;
    postpend: (...strs: string[]) => StringSchema;
    substring: (indexStart: number, indexEnd: number | undefined) => StringSchema;
    padEnd: (targetLength: number, padString: string) => StringSchema;
    padStart: (targetLength: number, padString: string) => StringSchema;
    repeat: (n: number) => StringSchema;
    replace: (searchFor: string | RegExp, replaceWith: string) => StringSchema;
    slice: (beginIndex: number, endIndex: number | undefined) => StringSchema;
    toLocaleLowerCase: (locale: string | string[] | undefined) => StringSchema;
    toLocaleUpperCase: (locale: string | string[] | undefined) => StringSchema;
    toLowerCase: () => StringSchema;
    toUpperCase: () => StringSchema;
    trim: () => StringSchema;
    trimStart: () => StringSchema;
    trimEnd: () => StringSchema;
    trimLeft: () => StringSchema;
    trimRight: () => StringSchema;
};
export declare const string: () => StringSchema;
export {};
//# sourceMappingURL=string.d.ts.map